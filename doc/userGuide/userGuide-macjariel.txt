
= Introduction =

Welcome to the Ocerus User guide - a document that shows basic usage of the Ocerus Engine from the game designer perspective. With Ocerus you are able to create modern 2D games in an easy and staightforward manner. Ocerus can also handle 3D objects, so you can easily place your 3D models onto the 2D game plane....

The purpose of this document is to show you the basics of using Ocerus and by a simple project demonstration it should help you get set up and creating wonderful games in no time.

= Installation =
The Ocerus project is currently hosted at Sourceforge and its homepage is ocerus.sourceforge.net. On that page, you can get the latest Ocerus installation package. Just download the installation package and launch it. Installation process is rather staight forward, so a few next button clicks will do the job. We are ready for our first launch.

= First steps =
To start Ocerus, click the Ocerus icon on your desktop or in the start menu. In a few moments, the main Ocerus window appears (see FIGURE). In the top edge of the window there is main menu. You can use this menu to do various actions in the editor. The rest of the window is empty, because we have nothing to edit now. Let's start with creatig a sample project.

== Creating the project ==
By selecting the <b>File > Create Project</b> command from the main menu, open the Create project dialog. Type in the name of the project and browse the location where your project will reside. Note that a new subdirectory in the chosen location will be created and it will be named the same as the project name. That is why you should avoid any nonstandard characters in the project name. When the <b>OK</b> button is clicked, the new project is created.

A project in Ocerus represent a single game, so for every another game that you want to design, you need to create another project. Behind the scene, projects are represented as simple directories on your filesystem with resource files representing your game content, such as images, models, scripts, etc. The structure of the project directory is on your own consideration, but it's recommended to stick with the default structure that is created for new projects.

The Ocerus window is still almost empty. Let's create a <b>scene</b>. 

== Creating scenes ==
Select the <b>Scene > New Scene</b> command from the main menu. In the New Scene dialog select the scenes subdirectory and type scene1.xml as the scene filename (see FIGURE). When you are ready, click the OK button and new scene will be created and automatically opened.

After a scene is opened, views and viewports are displayed (see FIGURE). Viewports are framed areas that provide a view to the current scene. There are two viewports. Top viewport (the game viewport) shows the scene in the same way as it is shown in the resulting game, whereas the bottom viewport (the editor viewport) shows the scene with editing tools visible. Viewports are surrounded with views that provide information related to current scene or current entity. There are five views: Entity Editor, Hierarchy, Layers, Prototypes and Resources. All these views will be discused later, now we move on creating an entity.

== Creating an entity ==
To create an entity, select the <b>Scene > New Entity</b> command from the main menu and type the entity name. In our sample project there will be a ball that will bounce over the area, so we will name the entity "Ball". Click the OK button and the new entity appears in the hierarchy view. Select the entity by clicking it in the hierarchy view.

As soon as an entity is selected, the entity view shows related information about it (see FIGURE). First group window in the entity view shows basic properties of the entity, such as its ID and its name. Some of these properties can be modified by clicking the property value and editing it. Note that if the property value is greyed, then it cannot be edited directly, or it cannot be edited at all.

Entities in Ocerus are composed of components that determine their behavior and functionality and each components can have another properties. All components and their properties are shown just under the "general info" group window in the entity editor and the properties can be edited the same way as the general info properties.

Almost any entity that you will create will be composed at least of the <b>Transform</b> component. Entity with this components are, simply speaking, placed to a specific position in our virtual 2D world. It can move around, change its size and rotate. These transformations are represented by the <b>position</b>, <b>scale</b> and <b>angle</b> properties. You can also see the position, size and rotation of the entity in the bottom viewport. Although our ball does not have a graphics yet, it is represented in the bottom viewport as a red square. You can try to modify the position property and see the red square move to another spot. However, if you change the scale property, you will see no difference. We need to give our entity a graphical form. This can be achieved with the <b>Sprite</b> component.

== Creating a component ==
Make sure that the "Ball" entity is selected, then click the "Edit > New Component > Sprite" action from the main menu. Our entity is now represented by a red filled square with the "NULL TEXTURE" text and a new group window is appended to the entity view (see FIGURE). Notice that the red filled square is also visible in the game viewport. This is because our entity has a graphical form now. The default null texture is used, however. To give our ball a more appealing appearance, we have to change the texture property in its sprite component. But how to get our fancy ball texture into ocerus?

== Adding graphics content ==
Every file and directory that is placed into our project directory hierarchy is visible in the resources view (see FIGURE). To put a file with your textures into the project simply copy the file somewhere to your project directory.

You can either use the ball.png texture from the archive provided with this document, or you can create or get any texture you like. Finally, copy it to textures subdirectory of your project directory. Switch back to ocerus and you will see that ball.png appears in the resources view.

Now we have our texture in ocerus, let's use it as a texture property of our entity.


== Linking resources to properties ==
Properties that contain a resource (resource properties) cannot be edited with a simple text editor and therefore they are greyed. To link a resource to such property, you have to drag the resource from the resource window and drop it to the greyed area of the property. Click the ball.png resource in the resource view and drag it to texture property in the entity view (see FIGURE). If you were sucessful, you should end up with a ball image instead of ugly null texture in the viewport.

Now that we have an entity with a transform and sprite component, we can take a look on basic editing of entity transformations.

== Moving, rotating and scaling entities ==
We have already discussed the way to move, rotate and scale an entity by editing its transform properties. This is, however, very uncomfortable. Ocerus provides editing tools to faciliate these operations. There are four editing tools in ocerus: move tool, rotate tool, rotate-y tool and scale tool (see FIGURE). You can switch among these editing tools by clicking the corresponding icon, which becomes pressed.

When the move tool is active, you can move the selected entity by dragging it in the editor viewport. By selecting the rotate tool and draging the entity you can rotate the entity and lastly the scale tool allows you to change the scale of the entity, again, by dragging the entity in the editor viewport. Take some time to familiarize with these tools as they are vital to rapid designing in ocerus. Consider using hotkeys to became even faster (see hotkeys).

== Adding collision polygon ==
Although our ball has a texture already, ocerus does not know what is its shape. As soon as we introduce physics into our game, it is necessary that every entity that is influenced by physic has a collision polygon defined. To define a collision polygon, add the <b>PolygonCollider</b> component to our ball entity (select Edit > New Component > PolygonCollider). A polygon is then defined as a list of points in the Polygon property of the component. For our ball we will create an octagon with the following points:

(0, -0,5) , (0.35, -0.35), (0.5, 0), (0.35, 0.35 ), (0, 0.5), (-0,35, 0.35), (-0.5, 0), (-0.35, -0.35)

[TODO: az budou nove ikonky v array editoru, dopise se tady jakym zpusobem se pracuje s array editorem a jak to tam ma teda vlozit]

Enter the points according to FIGURE and save. After the new collision polygon is saved to our entity, it is displayed as a blue outline in the editor viewport.

Our ball entity now has a collision polygon which means, that if a physics is applied to that entity, it will collide with another physics affected entities according to their collision polygons. So to really see the polygon collider in action, we have to add physics.

== Adding physics ==
If you want an entity to be affected by the ocerus physical engine, you need to add one of the Body components. There are two Body components: StaticBody and DynamicBody.

Entities with StaticBody components are stationary building blocks in your world. They are never moved by the physical engine and their primary function is to build borders and walls. On the other hand, entities with DynamicBody are used for objects that are affected by gravitation and other forces. Our ball entity is an example of entity with DynamicBody.

By selecting <b>Edit > New Component > DynamicBody</b> action, add the DynamicBody component to the Ball entity. Now ball is affected by the gravitation force.

Ocerus does not implement the real gravitation force in the sense that all objects attract others. Instead, all objects are attracted staight down. That means that as soon as we start our so far created game, our ball would infinately fall down. Let's create some barriers for our world.

Create a new entity called "Platform", add Sprite component and use steel.jpg as the texture. Add PolygonCollider and set polygon points to [5.12, -5.12]. [5.12, 5.12], [5.12, -5.12], [-5.12, -5.12]. Add StaticBody component and finaly use edit tools to shape the square into a slightly sloped platform and place it under the ball (see FIGURE). If you have problems with these steps, please read the chapters above.

If you are done, let's see what happens if we start the simulation.

== Starting the action ==
While we were building our scene so far, everything was static even though we added physics to our entities. This is because the action is stopped. During the editing you can arrange the initial state of your scene and when you feel like testing everything, you can animate the scene by starting the action. Action is controlled by the action toolbar (see FIGURE) that is composed of three buttons. Clicking the play button will start the action from the current state, clicking the pause button will pause action in the current state and clicking the stop button will stop the action and resets the scene to the initial state. After the action is started, you can still use edit tools and edit entity properties. Changes that you make will be discarded as soon as you stop the action, however.

Click the play action button and see the ball fall down on the platform. If your platform is crooked enough, you will see the ball roll down on the platform. You will probably see that the movement is not really regular. This is because we used a polygon with only eight vertices as the collision polygon for our ball. Try to double or even triple the number of the vertices and the movement will be more natural.
 
Now it's time to design our pinball machine. The pinball machine will be composed of many platforms, so we need to create a lot of new entities. As you could see when you created the first platform entity, the process is not quite short and you probably don't want to imagine how long it would take to create all those new entities the same way. For purposes of reusing existing entities ocerus has a few tricks. The first one is to use the duplicate entity action in the Edit menu. This action will duplicate the selected entity. You can duplicate the first platform entity a couple of times to have enough entities to design the pinball machine. This method is not recommended for this purpose, however. The more easy way is to use prototypes.

== Using prototypes ==
Prototypes are special entity templates. They are not related to a concrete scene, rather they are saved in Prototypes.xml file and can be accessed from any scene in the project. When you need to create a specific entity many times, you can create it once and then create a prototype from it. Then you can use this prototype as many times as you like.

To create a prototype from the Platform entity make sure it is selected and then select the Edit > Create Prototype action from the main menu. A new item appears in the Prototypes view. All prototypes in your project are displayed here and instantiation of prototypes is as easy as dragging the prototype from the prototype view to the editor viewport. Drag your new prototype to viewport a couple of times so you have enough entities to build the pinball machine.

When an entity is created from a prototype, this entity is linked to that prototype. This means that changes made to the prototype are propagated to all entities linked to it. However, this behavior is limited to only shared properties.

== Shared properties ==
Click the Platform prototype in the prototype view and look at the entity view (see FIGURE). On the left of every property there is a checkbox that controls, whether the property is shared or not. If you change a property that has this checkbox checked, the change will propagate to its linked entities. This concept is very handy if you need to globaly change some properties across several scenes in your project. You only have to change the prototype and ocerus will do the rest.

Select a Platform entity from the hierarchy view and again look at the entity view (see FIGURE). All properties that are shared have a lock icon in the left and cannot be edited.

Now with the knowledge of prototypes and shared properties you should be able to design your pinball machine, so it would look similar to figure FIGURE.




=










==






That is why the <b>Transform</b> component is present when you create a new entity. Therefore, our ball can be placed to a spot determined by the position property of the transform component. Note that t







In the rest of the window there are various views (Entity Editor, Hierarchy, Layers, Prototypes, Resources) that display useful information related to edited projects, entites, etc. Currenly all views are empty, because there 
 








          o Mily uzivateli, vitej blabla
          o popsat strukturu casti 
    * simple project
          o installation and launch
          o creating new project
          o ...
          o popis okynek, co uzivatel vidi
          o pridani skriptu, fyziky, gui, atd, bez toho aby uzivatel vedel, jak na to, ale aby neco videl
          o i deploy
          o nevysvetlovat, co neni pro simple project potreba (dalsi ovladani) 
    * entities
          o layers
          o popis komponent a odkaz na relevantni kapitoly 
    * resources
    * visuals
    * skripty
    * fyzika
    * GUI
    * prototypes
    * deploy 


REQUIREMENTS:
* kdyz neni nahrany projekt, nezobrazuji se zadne views (Entity Editor, Hierarchy, ...)
* rotate-y tool je disabled, kdyz entita neni model
