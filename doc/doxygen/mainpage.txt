
/** 

@mainpage Ocerus Reference Manual
  
  
@section intro Introduction
  
@subsection s1 What is this?
This is a reference manual to Ocerus - a game engine suited for middle-sized <a href="http://en.wikipedia.org/wiki/2.5D">2.5D</a> projects. 2.5D means the physics and most of the graphics are in two dimensions, but some 3D objects are supported as well. The main focus lies on the editing tools integrated to the engine. So, every change is immediately visible in the game context and can be tested in a real time. The engine takes care of rendering, physics, customization of game object behavior by scripts, resource management and input devices. It also provides a connection between the parts of the engine. The game objects are easily expandable using new components or scripts. Scripts themselves have access to other parts of the system.


@subsection s2 Where to start?
If you're unfamiliar with the controls of the editor you should read the <a href="../UserGuide.pdf">user guide</a> to Ocerus. It covers the basic controls and shows you how to create a simple game. Then, if you're interested in extending the engine you want to read this <a href="../ExtendingOcerus.pdf">extensions guide</a>. Finally, if you want to get deep into the inner stuff of the engine you can read the detailed description of its parts in the <a href="../DesignDocumentation.pdf">design documentation</a>.


@section architecture Architecture
The engine is divided into bigger parts which group together related code. Each of these parts correspond to a unique namespace. For example, resources are handled by ResourceSystem. So, to learn more about the architecture it's probably best to read the documentation of <a href="namespaces.html">namespaces</a>.


@section settings Project Settings
To support multiple platforms the engine defines a set of global type definitions and macros which control the behaviour
of the application. They all reside in headers in the <i>Setup</i> directory. The main header included in most files
is Settings.h.


@section otherProjects Similar Projects
A tool for game development is nothing new. Every development studio has its own tools for creating certain aspects of the game, but only few of those are generic enough to make them usable for other people as well. An example of these might be <a href="http://www.unreal.com/">Unreal Technology</a>, which provides very complex and sophisticated tool for AAA developers. Unfortunately it is also very heavyweight and expensive, so it's not so useful for small development studios. On the other side of the spectrum, there are simple tools like <a href="http://www.yoyogames.com/gamemaker">Game Maker</a>, which are very easy to use but lack a lot of features and performance and generally are considered to be targeted at hobbyists instead of professional developers. 

Our project attempts to fit into the middle of the spectrum. It is not too simple but at the same it is not too complex either. We do this mostly by putting our hands away from the 3D and focusing on 2D (or 2.5D) instead. In this field, the biggest competitor is probably <a href="http://unity3d.com/">Unity</a>, which grew into a very powerful tool during the last year. It surpasses ours in many ways but for a price, of course: there is no source code available, and it's targeted to 3D games which makes its use for 2D somewhat complicated.


@section timeline Project Timeline
The following list present the timeline of the development of the project:

01/2010 - reviewing existing code, use cases, unit test framework, library structure, log system, utilities 

02/2010 - script system, graphic system, entity system, 2D graphic components

03/2010 - entity messages, camera and script component, profiler, memory management

04/2010 - gui system, entity picking, dynamic properties

05/2010 - rendering, gui console, resource system, input system, layer manager

06/2010 - physics and model components, string manager, project management, editor

07/2010 - documentation, polygon collider component

08/2010 - loading screen, resource refreshing, hierarchy window

09/2010 - configuration, sprite animation, testing, sample game

10/2010 - GUI layout component, sample game GUI, shortcuts, documentation, game deploy

11/2010 - testing, reviewing documentation

12/2010 - bug fixing, reviewing documentation

01/2011 - reviewing documentation


@section conclusion Conclusion
This project had two main objectives: to make game objects generic by constructing them from components and to make it possible to edit the game while it's running. We find these two things crucial during the development of a game in a small team. That said we believe we've successfuly put these features into the final application.

However, everything wasn't working as smooth as we intended. The main source of problems was our decision to use <a href="http://www.cegui.org.uk">CEGUI</a> for the GUI of the editor. CEGUI is designed to work inside the game itself and it turned out the editor has very different needs. This led to a lot of troubles; be it a poor performance or missing features that we had to implement by ourselves. It caused the delay of the first version that was able to display something. Until then we had to work on the engine itself without being able to debug features visually. 

There are also things we were not able to implement due to the time limit set on the project. This includes sound and music support and certain performance optimizations. Also parts of the engine would need porting to make them run on game consoles. Due to the need of being an officially registered developer at the consoles' manufacturers we opted not to focus on this. And as it was mentioned before the editor's GUI is currently far from perfect due to the bad choice of the GUI system. So it would make sense to rewrite it to use another library; <a href="http://qt.nokia.com/">Qt</a> being an example.

*/