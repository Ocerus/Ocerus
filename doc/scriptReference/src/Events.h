/// @defgroup events Events
/// @ingroup events
/// This is a list of events generated by messages received by the entity the script belongs to.
/// Each item in the list corresponds to a message type from ::eEntityMessageType.
//@{


/// ::INIT: Sent shortly after the entity is created and all initial properties are set.
void OnInit();

/// ::POST_INIT: Sent shortly after the INIT message is sent. This allows initialization of components which need other
/// components to be inited first.
void OnPostInit();

/// ::DESTROY: Sent shortly before the entity is destroyed.
void OnDestroy();

/// ::DRAW: Sent when the entity is to be redrawn.
/// Time passed since the last frame is sent as a parameter.
void OnDraw(float32 deltaTime);

/// ::DRAW_SELECTED: Sent when the selected entity is to be redrawn.
void OnDrawSelected();

/// ::UPDATE_LOGIC: Sent when the logic of the entity is to be updated.
/// Time passed since the last frame is sent as a parameter.
void OnUpdateLogic(float32 deltaTime);

/// ::UPDATE_POST_PHYSICS: Sent after the physics of the entity has been updated.
/// Time passed since the last frame is sent as a parameter.
void OnUpdatePostPhysics(float32 deltaTime);

/// ::COMPONENT_DESTROYED: Sent after a component of the entity was deleted.
/// The component type is passed in the parameter.
void OnComponentDestroyed(eComponentType destroyedComponent);

/// ::COMPONENT_CREATED: Sent when a component which was just created needs to notify
/// other components of its creation. The component type is passed in the parameter.
void OnComponentCreated(eComponentType createdComponent);

/// ::KEY_PRESSED: Sent when the user presses a key.
void OnKeyPressed(eKeyCode keyCode, uint32 character);

/// ::KEY_RELEASED: Sent when the user releases a key.
void OnKeyReleased(eKeyCode keyCode, uint32 character);

/// ::COLLISION_STARTED: Sent after two entities collide.
/// Collision normal vector and the contact point (world coordinates) are passed as parameters.
void OnCollisionStarted(EntityHandle other, Vector2 normal, Vector2 contactPoint);

/// ::COLLISION_ENDED: Sent after two entities stop to collide.
void OnCollisionEnded(EntityHandle other);




/// ::CHECK_ACTION: Sent when a scripts needs to synchronize or update itself.
void _CheckAction();

/// ::RESOURCE_UPDATE: Sent when the resources of this entity is going to be updated.
void _ResourceUpdate();

/// ::SYNC_PRE_PHYSICS: Sent when the physics of the entity is going to be updated.
void _SyncPrePhysics(float32 deltaTime);

/// ::SYNC_POST_PHYSICS: Sent when the physics of the entity is updating.
void _SyncPostPhysics(float32 deltaTime);



//@}