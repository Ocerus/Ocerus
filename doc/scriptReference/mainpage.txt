
/** 

@mainpage Ocerus Script Reference
  
  
@section intro Introduction
  
This is a reference manual to the scripting language used in Ocerus. To see the C++ reference manual to Ocerus
see <a href="../../doxygen">doxygen</a>.

The scripting language used is <a href="http://www.angelcode.com/angelscript/">AngelScript</a>. This manual
describes only functions specific to Ocerus. To see the documentation to the language itself (including
the syntax, default types and constructs, built-in functions, etc.) visit
the <a href="http://www.angelcode.com/angelscript/sdk/docs/manual/index.html">AngelScript manual</a> homepage.   


@section s2 How to write scripts

First of all make sure to read the <a href="../../userGuide">user guide</a> which will teach you how to create
and set up a project and create your first script. Script are connected to the other parts of the engine
by using entity components. So to write a script you add a component to the entity related to your script.
Then link the script file to the component by dragging it there from the resource window. Once this is done
you can change the script file and once you save it it automatically reloads in the game as well.



@section s3 Where to start?

To write some code you need a point of entry. Often this is the "void main()" functions but not here.
Every code gets executed only as a reaction to an event. These events are generated by entities sending
messasges among themselves. So, the best place to start is to see what
<a href="group__events.html">event handlers</a>
are available from the scripts and write some code (like ::Println()) into them to see if it works. Then
you can browse other classes and functions to add your functionality. Make sure you also see
<a href="group__globals.html">global functions and variables</a>.



@section s4 Using custom variables

Sometimes it's necessary to declare your own variables which last outside functions and handlers. You
could use global variables as defined in AngelScript but it's not the recommended solution since they
are also shared among all instances of the script. So if you have multiple entities using the same
script file they will all share the values of the variables.

Instead it's better to create the variable as a dynamic property using methonds such as
EntityHandle::RegisterDynamicProperty_bool(). These variables then appear in the entity editor window as well as
common properties and the user can see or edit them. This way the user can influence the behaviour
of your script and it makes it easier to re-use the script.


*/
