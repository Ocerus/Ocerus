/// @file
/// Platform specific settings of common data types and operators needed in the project.

#ifndef _SETTINGS_H_
#define _SETTINGS_H_

#include "Platform.h"

// Disable boost exceptions.
#define BOOST_NO_TYPEID

// Disable MSVC warnings about use of 'unsafe' functions like strcpy().
#define _CRT_SECURE_NO_WARNINGS


// These must come first!
#include "SmartAssert.h"
#include "Memory_pre.h"



#include "BasicTypes.h"
#include "ComplexTypes.h"
#include "MathConsts.h"

template<typename T, typename U>
inline void swap(T& first, U& second) { std::swap(first, second); } 




// These must come last!
#include "Memory_post.h"


namespace Utils {}
using namespace Utils;
namespace Reflection {}
using namespace Reflection;
namespace LogSystem {}
using namespace LogSystem;


#ifdef __WIN__
// Disable warning 'conditional expression is constant'. The compiler will optimize it away.
#pragma warning(disable: 4127)
// Disable warning 'unreferenced formal parameters'. We always want formal parameters to be present!
#pragma warning(disable: 4100)
// Disable warning 'assignment operator could not be generated'. We don't want autogenerated assignment operators!
#pragma warning(disable: 4512)
#endif


#endif
